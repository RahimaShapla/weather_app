import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:geolocator/geolocator.dart';
import 'package:weather_app/weather_model.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      title: 'Weather App',
      home: WeatherScreen(),
    );
  }
}

class WeatherScreen extends StatefulWidget {
  const WeatherScreen({super.key});

  @override
  _WeatherScreenState createState() => _WeatherScreenState();
}

class _WeatherScreenState extends State<WeatherScreen> {
  String apiKey = '3d964b6b2fb6de3e544bed748243d6d9';
  Position? position;
  Autogenerated? weatherModel;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Weather App'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Text('Latitude & Longitude: '),
            if (position != null)
              Text("lat=${position!.latitude} &lon=${position!.latitude}\n"),
            ElevatedButton(
              onPressed: () {
                determinePosition();
              },
              child: const Text('Get Weather'),
            ),
            if(weatherModel != null)
            Text("\nWeather Title: ${weatherModel!.weather![0].main!}"),
            if(weatherModel != null)
            Text("Weather Description : ${weatherModel!.weather![0].description!}"),
          ],
        ),
      ),
    );
  }

  Future<void> fetchWeatherData() async {
    var response = await http.get(Uri.parse(
        "https://api.openweathermap.org/data/2.5/weather?lat=${position!.latitude}"
        "&lon=${position!.longitude}&appid=$apiKey"));

    if (response.statusCode == 200) {
      setState(() {
        weatherModel = Autogenerated.fromJson(json.decode(response.body));
      });
    } else {
      throw Exception('Failed to load weather data');
    }
  }

  determinePosition() async {
    bool serviceEnabled;
    LocationPermission permission;
    try {
      serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        debugPrint("not enable");
      }

      permission = await Geolocator.checkPermission();

      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          debugPrint("denied");
        }
      }

      if (permission == LocationPermission.deniedForever) {
        debugPrint("deniedForever");
      }

      position = await Geolocator.getCurrentPosition();
      fetchWeatherData();
    } on Exception catch (e) {
      debugPrint(e.toString());
    }
  }
}
